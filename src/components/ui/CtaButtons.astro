---
import Button from "./Button.astro";
import ButtonGroup from "./ButtonGroup.astro";
import type { ButtonVariant, ButtonSize } from "../../props/button.ts";

type Theme = "light" | "dark";

export interface Props {
  primaryCta?: {
    text: string;
    href: string;
    variant?: ButtonVariant;
  };
  secondaryCta?: {
    text: string;
    href: string;
    variant?: ButtonVariant;
  };
  alignment?: "start" | "center" | "end";
  size?: ButtonSize;
  theme?: Theme;
  class?: string;
}

const {
  primaryCta,
  secondaryCta,
  alignment = "start",
  size = "lg",
  theme = "light",
  class: className = "",
} = Astro.props;

// Auto-determine button variants based on theme if not explicitly set
const getVariants = (theme: Theme): { primary: ButtonVariant; secondary: ButtonVariant } => {
  if (theme === "dark") {
    return {
      primary: "white",
      secondary: "white-outline",
    };
  }
  return {
    primary: "primary",
    secondary: "outline",
  };
};

const variants = getVariants(theme);

// Only render if at least one CTA is provided
const shouldRender = primaryCta || secondaryCta;
---

{
  shouldRender && (
    <ButtonGroup alignment={alignment} class={className}>
      {primaryCta && (
        <Button
          href={primaryCta.href}
          variant={primaryCta.variant || variants.primary}
          size={size}
        >
          {primaryCta.text}
        </Button>
      )}
      {secondaryCta && (
        <Button
          href={secondaryCta.href}
          variant={secondaryCta.variant || variants.secondary}
          size={size}
        >
          {secondaryCta.text}
        </Button>
      )}
    </ButtonGroup>
  )
}
