---
import type { HTMLAttributes } from "astro/types";

type Opacity = "10" | "20" | "30" | "40" | "50" | "60" | "70" | "80" | "90";
type OverlayColor = "black" | "white" | "blue" | "gray";

export interface Props extends HTMLAttributes<"div"> {
  src: string;
  alt?: string;
  overlay?: boolean;
  overlayColor?: OverlayColor;
  overlayOpacity?: Opacity;
}

const { 
  src,
  alt = "",
  overlay = false,
  overlayColor = "black",
  overlayOpacity = "50",
  class: _class = "",
  ...rest 
} = Astro.props;

const opacityClasses: Record<Opacity, string> = {
  "10": "opacity-10",
  "20": "opacity-20",
  "30": "opacity-30",
  "40": "opacity-40",
  "50": "opacity-50",
  "60": "opacity-60",
  "70": "opacity-70",
  "80": "opacity-80",
  "90": "opacity-90"
};

const overlayColorClasses: Record<OverlayColor, string> = {
  black: "bg-black",
  white: "bg-white",
  blue: "bg-blue-900",
  gray: "bg-gray-900"
};
---

<div 
  class:list={[
    "relative overflow-hidden",
    _class
  ]} 
  {...rest}
>
  <img 
    src={src}
    alt={alt}
    class="absolute inset-0 w-full h-full object-cover object-center"
  />
  
  {overlay && (
    <div 
      class:list={[
        "absolute inset-0",
        overlayColorClasses[overlayColor],
        opacityClasses[overlayOpacity]
      ]}
      aria-hidden="true"
    />
  )}
  
  <div class="relative z-10">
    <slot />
  </div>
</div>
